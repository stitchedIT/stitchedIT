// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//     provider = "sqlite"
//     // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
//     // Further reading:
//     // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
//     // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
//     url      = env("DATABASE_URL")
// }
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  recommendations Recommendation[]
  sessions        Session[]
  posts           Post[]
  savedPosts      Post[]           @relation("BookmarkedPosts")
  comments        Comment[] // Two-way relation established here
  wishlist        ClothingItem[]   @relation("UserWishlist")
}

model Post {
  id           Int       @id @default(autoincrement())
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  description  String?
  brandTags    String[]
  imageUrl     String
  likes        Int       @default(0)
  comments     Comment[]
  bookmarkedBy User[]    @relation("BookmarkedPosts")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id]) // Two-way relation established here
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
}

model ClothingItem {
  id              Int              @id @default(autoincrement())
  brand           String
  description     String?
  imageUrl        String
  price           Decimal
  recommendations Recommendation[]
  wishedBy        User[]           @relation("UserWishlist")
  createdAt       DateTime         @default(now())
}

model Recommendation {
  id             Int          @id @default(autoincrement())
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  clothingItemId Int
  clothingItem   ClothingItem @relation(fields: [clothingItemId], references: [id])
  feedback       String? // e.g. "Liked", "Disliked", "Neutral"
  createdAt      DateTime     @default(now())
}

//a table holding liked shoes

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
